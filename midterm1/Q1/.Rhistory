saveRDS(rf_fit2, "rf_permutation.rds")
saveRDS(rf_fit3, "rf_impurity.rds")
library(gbm)
set.seed(1234)
boost_tree_1 <- gbm(shares ~., data = df_train, distribution = "gaussian",
n.trees = 1000, interaction.depth = 1, shrinkage = 0.005, bag.fraction = 1, cv.folds = 5)
boost_tree_2 <- gbm(shares ~., data = df_train, distribution = "gaussian",
n.trees = 1000, interaction.depth = 2, shrinkage = 0.005, bag.fraction = 1, cv.folds = 5)
# importance measure
df <- data.frame(summary(boost_tree_1, plotit = FALSE))
df %>% arrange(desc(df$rel.inf)) %>% top_n(10)
df <- data.frame(summary(boost_tree_2, plotit = FALSE))
df %>% arrange(desc(df$rel.inf)) %>% top_n(10)
# CV estimate of EPE at each step
plot(seq(1, 1000), boost_tree_1$cv.error, type = "l")
plot(seq(1, 1000), boost_tree_2$cv.error, type = "l")
print(paste("boost_tree_1: ", boost_tree_1$cv.error[1000]))
print(paste("boost_tree_2: ", boost_tree_2$cv.error[1000]))
# saving the model
saveRDS(boost_tree_1, "boost_tree_1(interaction.depth=1).rds")
saveRDS(boost_tree_2, "boost_tree_2(interaction.depth=2).rds")
gam2 <- gam(shares ~ s(kw_avg_avg) + s(kw_min_avg), + s(LDA_02) + s(self_reference_avg_shares) +
data_channel_is_viral + s(global_subjectivity) + s(self_reference_min_shares) +
s(self_reference_max_shares),
data = df_train_sample)
gam2 <- gam(shares ~ s(kw_avg_avg) + s(kw_min_avg) + s(LDA_02) + s(self_reference_avg_shares) +
data_channel_is_viral + s(global_subjectivity) + s(self_reference_min_shares) +
s(self_reference_max_shares),
data = df_train_sample)
nolnames(df_train_sample)
colnames(df_train_sample)
gam2 <- gam(shares ~ s(kw_avg_avg) + s(kw_min_avg) + s(LDA_02) + s(self_reference_avg_sharess) +
data_channel_is_viral + s(global_subjectivity) + s(self_reference_min_shares) +
s(self_reference_max_shares),
data = df_train_sample)
plot(gam2, pages = 1)
round(sqrt(summary(gam12)$sp.criterion), 5
round(sqrt(summary(gam12)$sp.criterion), 5)
roundround(sqrt(summary(gam2)$sp.criterion), 5)
round(sqrt(summary(gam2)$sp.criterion), 5)
# saving the model
saveRDS(gam1, "GAM_LASSO.rds")
saveRDS(gam2, "GAM_combine.rds")
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
rm(list=ls(all=TRUE))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/midterm1/in-progress")
df_train <- read.csv("midterm1_train.csv")
df_test <- read.csv("midterm1_testProto.csv")
# take of log of `share`
df_train$shares = log(df_train$shares)
df_test$shares = log(df_test$shares)
# adding the `viral content category` variable
df_train$data_channel_is_viral = df_train$data_channel_is_lifestyle
for (i in 1:nrow(df_train)){
if (df_train[i, "data_channel_is_lifestyle"] == 0 &
df_train[i, "data_channel_is_entertainment"] == 0 &
df_train[i, "data_channel_is_bus"] == 0 &
df_train[i, "data_channel_is_socmed"] == 0 &
df_train[i, "data_channel_is_tech"] == 0 &
df_train[i, "data_channel_is_world"] == 0){
df_train[i, "data_channel_is_viral"] = 1
} else{
df_train[i, "data_channel_is_viral"] = 0
}
}
df_train$data_channel_is_viral <- as.integer(df_train$data_channel_is_viral)
df_test$data_channel_is_viral = df_test$data_channel_is_lifestyle
for (i in 1:nrow(df_test)){
if (df_test[i, "data_channel_is_lifestyle"] == 0 &
df_test[i, "data_channel_is_entertainment"] == 0 &
df_test[i, "data_channel_is_bus"] == 0 &
df_test[i, "data_channel_is_socmed"] == 0 &
df_test[i, "data_channel_is_tech"] == 0 &
df_test[i, "data_channel_is_world"] == 0){
df_test[i, "data_channel_is_viral"] = 1
} else{
df_test[i, "data_channel_is_viral"] = 0
}
}
df_test$data_channel_is_viral <- as.integer(df_test$data_channel_is_viral)
# dropping variables that might cause collinearity issue
df_train <- subset(df_train, select = -c(is_weekend, LDA_04, url))
df_test <- subset(df_test, select = -c(is_weekend, LDA_04, url))
set.seed(1234)
ind <- sample(2, nrow(df_train), replace = T, prob = c(0.7, 0.3))
df_train_sample <- df_train[ind == 1, ]
df_test_sample <- df_train[ind == 2, ]
lm_fit <- readRDS("lm_fit.rds")
knn_fit <- readRDS("knn_fit.rds")
LASSO_fit <- readRDS("LASSO_fit.rds")
gam_LASSO <- readRDS("GAM_LASSO.rds")
gam_combined <- readRDS("GAM_combine.rds")
bagged_tree <- readRDS("bagged_tree.rds")
rf_fit <- readRDS("rf.rds")
boost_tree_1 <- readRDS("boost_tree_1(interaction.depth=1).rds")
boost_tree_2 <- readRDS("boost_tree_2(interaction.depth=2).rds")
LASSO_fit
gam_LASSO
sqrt(summary(gam1)$sp.criterion), 5
sqrt(summary(gam1)$sp.criterion), 5)
round(sqrt(summary(gam1)$sp.criterion), 5)
round(sqrt(summary(gam_combined)$sp.criterion), 5)
round(sqrt(summary(gam_combined)$sp.criterion), 5)
round(sqrt(summary(gam_combined)$sp.criterion), 5)
round(sqrt(summary(gam_LASSO)$sp.criterion), 5)
bagged_tree
rf_fit
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5
# knn
knn_RMSE <- knn_fit$results[3,2]
knn_fit
knn_fit$results[3,2]
knn_RMSE <- knn_fit$results[3,2]
lm_RMSE <- round(sqrt(LOOCV), 5
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
# knn
knn_RMSE <- knn_fit$results[3,2]
# LASSO
LASSO_RMSE <- round(sqrt(0.7878), 5)
# GAM_LASSO
GAM_LASSO_RMSE <- round(sqrt(summary(gam_LASSO)$sp.criterion), 5)
# GAM_Combine
GAM_Combine_RMSE <- round(sqrt(summary(gam_combined)$sp.criterion), 5)
# bagged_tree
baggedTree_RMSE <- round(sqrt(0.7318782), 5)
# RF
rf_RMSE <- round(sqrt(0.7232391), 5)
# bRF_1
boostedRF1_RMSE <- round(sqrt(boost_tree_1$cv.error[1000]), 5)
# bRF_2
boostedRF2_RMSE <- round(sqrt(boost_tree_2$cv.error[1000]), 5)
RMSE <- c(lm_RMSE, knn_RMSE, LASSO_RMSE,
GAM_LASSO_RMSE, GAM_Combine_RMSE, baggedTree_RMSE,
rf_RMSE, boostedRF1_RMSE, boostedRF2_RMSE)
Model <- c('Linear', 'KNN', 'LASSO',
'GAM_LASSO', 'GAM_combined', 'Bagged Tree', 'Random Forest', 'Boosted Random Forest (1)',
'Boosted Random Forest (2)')
model_compare <- data.frame(Model, RMSE)
model_compare %>% arrange(model_compare$RMSE) %>% top_n(10)
model_compare <- data.frame(Model, RMSE)
model_compare %>% arrange(model_compare$RMSE)
library(gbm)
set.seed(1234)
boost_tree_1 <- gbm(shares ~., data = df_train_sample, distribution = "gaussian",
n.trees = 1000, interaction.depth = 1, shrinkage = 0.005, bag.fraction = 1, cv.folds = 5)
boost_tree_2 <- gbm(shares ~., data = df_train_sample, distribution = "gaussian",
n.trees = 1000, interaction.depth = 2, shrinkage = 0.005, bag.fraction = 1, cv.folds = 5)
# importance measure
df <- data.frame(summary(boost_tree_1, plotit = FALSE))
df %>% arrange(desc(df$rel.inf)) %>% top_n(10)
df <- data.frame(summary(boost_tree_2, plotit = FALSE))
df %>% arrange(desc(df$rel.inf)) %>% top_n(10)
# CV estimate of EPE at each step
plot(seq(1, 1000), boost_tree_1$cv.error, type = "l")
plot(seq(1, 1000), boost_tree_2$cv.error, type = "l")
print(paste("boost_tree_1: ", boost_tree_1$cv.error[1000]))
print(paste("boost_tree_2: ", boost_tree_2$cv.error[1000]))
# saving the model
saveRDS(boost_tree_1, "boost_tree_1(interaction.depth=1).rds")
saveRDS(boost_tree_2, "boost_tree_2(interaction.depth=2).rds")
lm_fit <- readRDS("lm_fit.rds")
knn_fit <- readRDS("knn_fit.rds")
LASSO_fit <- readRDS("LASSO_fit.rds")
gam_LASSO <- readRDS("GAM_LASSO.rds")
gam_combined <- readRDS("GAM_combine.rds")
bagged_tree <- readRDS("bagged_tree.rds")
rf_fit <- readRDS("rf.rds")
boost_tree_1 <- readRDS("boost_tree_1(interaction.depth=1).rds")
boost_tree_2 <- readRDS("boost_tree_2(interaction.depth=2).rds")
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
# knn
knn_RMSE <- knn_fit$results[3,2]
# LASSO
LASSO_RMSE <- round(sqrt(0.7878), 5)
# GAM_LASSO
GAM_LASSO_RMSE <- round(sqrt(summary(gam_LASSO)$sp.criterion), 5)
# GAM_Combine
GAM_Combine_RMSE <- round(sqrt(summary(gam_combined)$sp.criterion), 5)
# bagged_tree
baggedTree_RMSE <- round(sqrt(0.7318782), 5)
# RF
rf_RMSE <- round(sqrt(0.7232391), 5)
# bRF_1
boostedRF1_RMSE <- round(sqrt(boost_tree_1$cv.error[1000]), 5)
# bRF_2
boostedRF2_RMSE <- round(sqrt(boost_tree_2$cv.error[1000]), 5)
RMSE <- c(lm_RMSE, knn_RMSE, LASSO_RMSE,
GAM_LASSO_RMSE, GAM_Combine_RMSE, baggedTree_RMSE,
rf_RMSE, boostedRF1_RMSE, boostedRF2_RMSE)
Model <- c('Linear', 'KNN', 'LASSO',
'GAM_LASSO', 'GAM_combined', 'Bagged Tree', 'Random Forest', 'Boosted Random Forest (1)',
'Boosted Random Forest (2)')
model_compare <- data.frame(Model, RMSE)
model_compare %>% arrange(model_compare$RMSE)
tst_x <- as.matrix(df_test[,-58])
tst_y <- as.matrix(df_test$shares)
tst_x_df <- df_test[,-58]
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
prediction.KNN <- predict(knn_fit, newdata = tst_x_df)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
trn_x <- as.matrix(df_train[,-58])
trn_y <- as.matrix(df_train$shares)
tst_x <- as.matrix(df_test[,-58])
tst_y <- as.matrix(df_test$shares)
tst_x_df <- df_test[,-58]
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
prediction.KNN <- predict(knn_fit, newdata = tst_x_df)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
prediction.LASSO <- predict(fit.LASSO, newx = tst_x, s = fit_cv_LASSO$lambda.1se)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
prediction.LASSO <- predict(fit.LASSO, newx = tst_x, s = LASSO_fit$lambda.1se)
trn_x <- as.matrix(df_train_sample[,-58])
trn_y <- as.matrix(df_train_sample$shares)
tst_x <- as.matrix(df_test_sample[,-58])
tst_y <- as.matrix(df_test_sample$shares)
tst_x_df <- df_test_sample[,-58]
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
prediction.KNN <- predict(knn_fit, newdata = tst_x_df)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
prediction.LASSO <- predict(fit.LASSO, newx = tst_x, s = LASSO_fit$lambda.1se)
prediction.baggedTree <- predict(bagged_tree, tst_x_df)
prediction.baggedTree <- prediction.baggedTree$predictions
prediction.RF <- predict(rf_fit, tst_x_df)
prediction.RF <- prediction.RF$predictions
prediction.bRF_1 <- predict(boost_tree_1, newdata = tst_x_df)
prediction.bRF_2 <- predict(boost_tree_2, newdata = tst_x_df)
test.RMSE <- data.frame(Models = c("Linear","KNN","Lasso", "GAM_LASSO",
"GAM_Combined", "Bagged Tree", "Random Forest",
"Boosted Rnadom Forest(1)", "Boosted Rnadom Forest(2)"),
RMSE = c(ModelMetrics::rmse(pred=prediction.linear, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.KNN, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.LASSO, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.GAM_LASSO, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.GAM_Combined, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.baggedTree, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.RF, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.bRF_1, actual = df_test$shares),
ModelMetrics::rmse(pred=prediction.bRF_2, actual = df_test$shares)))
test.RMSE <- data.frame(Models = c("Linear","KNN","Lasso", "GAM_LASSO",
"GAM_Combined", "Bagged Tree", "Random Forest",
"Boosted Rnadom Forest(1)", "Boosted Rnadom Forest(2)"),
RMSE = c(ModelMetrics::rmse(pred=prediction.linear, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.KNN, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_Combined, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.baggedTree, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.RF, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_1, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_2, actual = df_test_sample$shares)))
prediction.GAM_LASSO
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
prediction.KNN <- predict(knn_fit, newdata = tst_x_df)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
prediction.LASSO <- predict(fit.LASSO, newx = tst_x, s = LASSO_fit$lambda.1se)
prediction.GAM_LASSO <- predict(gam_LASSO, newdata = tst_x_df)
prediction.GAM_Combined <- predict(gam_combined, newdata = tst_x_df)
prediction.baggedTree <- predict(bagged_tree, tst_x_df)
prediction.baggedTree <- prediction.baggedTree$predictions
prediction.RF <- predict(rf_fit, tst_x_df)
prediction.RF <- prediction.RF$predictions
prediction.bRF_1 <- predict(boost_tree_1, newdata = tst_x_df)
prediction.bRF_2 <- predict(boost_tree_2, newdata = tst_x_df)
test.RMSE <- data.frame(Models = c("Linear","KNN","Lasso", "GAM_LASSO",
"GAM_Combined", "Bagged Tree", "Random Forest",
"Boosted Rnadom Forest(1)", "Boosted Rnadom Forest(2)"),
RMSE = c(ModelMetrics::rmse(pred=prediction.linear, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.KNN, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_Combined, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.baggedTree, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.RF, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_1, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_2, actual = df_test_sample$shares)))
test.RMSE$RMSE <- round(test.RMSE$RMSE, 5)
test.RMSE %>% arrange(RMSE)
test.RMSE <- data.frame(Models = c("Linear","KNN","Lasso", "GAM_LASSO",
"GAM_Combined", "Bagged Tree", "Random Forest",
"Boosted Random Forest(1)", "Boosted Random Forest(2)"),
RMSE = c(ModelMetrics::rmse(pred=prediction.linear, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.KNN, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_Combined, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.baggedTree, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.RF, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_1, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_2, actual = df_test_sample$shares)))
test.RMSE$RMSE <- round(test.RMSE$RMSE, 5)
test.RMSE %>% arrange(RMSE)
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
rm(list=ls(all=TRUE))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/midterm1/in-progress")
df_train <- read.csv("midterm1_train.csv")
df_test <- read.csv("midterm1_testProto.csv")
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
rm(list=ls(all=TRUE))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/midterm1/in-progress")
df_train <- read.csv("midterm1_train.csv")
df_test <- read.csv("midterm1_testProto.csv")
# take of log of `share`
df_train$shares = log(df_train$shares)
df_test$shares = log(df_test$shares)
# adding the `viral content category` variable
df_train$data_channel_is_viral = df_train$data_channel_is_lifestyle
for (i in 1:nrow(df_train)){
if (df_train[i, "data_channel_is_lifestyle"] == 0 &
df_train[i, "data_channel_is_entertainment"] == 0 &
df_train[i, "data_channel_is_bus"] == 0 &
df_train[i, "data_channel_is_socmed"] == 0 &
df_train[i, "data_channel_is_tech"] == 0 &
df_train[i, "data_channel_is_world"] == 0){
df_train[i, "data_channel_is_viral"] = 1
} else{
df_train[i, "data_channel_is_viral"] = 0
}
}
df_train$data_channel_is_viral <- as.integer(df_train$data_channel_is_viral)
df_test$data_channel_is_viral = df_test$data_channel_is_lifestyle
for (i in 1:nrow(df_test)){
if (df_test[i, "data_channel_is_lifestyle"] == 0 &
df_test[i, "data_channel_is_entertainment"] == 0 &
df_test[i, "data_channel_is_bus"] == 0 &
df_test[i, "data_channel_is_socmed"] == 0 &
df_test[i, "data_channel_is_tech"] == 0 &
df_test[i, "data_channel_is_world"] == 0){
df_test[i, "data_channel_is_viral"] = 1
} else{
df_test[i, "data_channel_is_viral"] = 0
}
}
df_test$data_channel_is_viral <- as.integer(df_test$data_channel_is_viral)
# dropping variables that might cause collinearity issue
df_train <- subset(df_train, select = -c(is_weekend, LDA_04, url))
df_test <- subset(df_test, select = -c(is_weekend, LDA_04, url))
set.seed(1234)
ind <- sample(2, nrow(df_train), replace = T, prob = c(0.7, 0.3))
df_train_sample <- df_train[ind == 1, ]
df_test_sample <- df_train[ind == 2, ]
lm_fit <- readRDS("lm_fit.rds")
knn_fit <- readRDS("knn_fit.rds")
LASSO_fit <- readRDS("LASSO_fit.rds")
gam_LASSO <- readRDS("GAM_LASSO.rds")
gam_combined <- readRDS("GAM_combine.rds")
bagged_tree <- readRDS("bagged_tree.rds")
rf_fit <- readRDS("rf.rds")
boost_tree_1 <- readRDS("boost_tree_1(interaction.depth=1).rds")
boost_tree_2 <- readRDS("boost_tree_2(interaction.depth=2).rds")
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
# knn
knn_RMSE <- knn_fit$results[3,2]
# LASSO
LASSO_RMSE <- round(sqrt(0.7878), 5)
# GAM_LASSO
GAM_LASSO_RMSE <- round(sqrt(summary(gam_LASSO)$sp.criterion), 5)
# GAM_Combine
GAM_Combine_RMSE <- round(sqrt(summary(gam_combined)$sp.criterion), 5)
# bagged_tree
baggedTree_RMSE <- round(sqrt(0.7318782), 5)
# RF
rf_RMSE <- round(sqrt(0.7232391), 5)
# bRF_1
boostedRF1_RMSE <- round(sqrt(boost_tree_1$cv.error[1000]), 5)
# bRF_2
boostedRF2_RMSE <- round(sqrt(boost_tree_2$cv.error[1000]), 5)
RMSE <- c(lm_RMSE, knn_RMSE, LASSO_RMSE,
GAM_LASSO_RMSE, GAM_Combine_RMSE, baggedTree_RMSE,
rf_RMSE, boostedRF1_RMSE, boostedRF2_RMSE)
Model <- c('Linear', 'KNN', 'LASSO',
'GAM_LASSO', 'GAM_combined', 'Bagged Tree', 'Random Forest', 'Boosted Random Forest (1)',
'Boosted Random Forest (2)')
model_compare <- data.frame(Model, RMSE)
model_compare %>% arrange(model_compare$RMSE)
trn_x <- as.matrix(df_train_sample[,-58])
trn_y <- as.matrix(df_train_sample$shares)
tst_x <- as.matrix(df_test_sample[,-58])
tst_y <- as.matrix(df_test_sample$shares)
tst_x_df <- df_test_sample[,-58]
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
library(ggplot2)
library(data.table)
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2, tidy.opts=list(width.cutoff=60), tidy=TRUE)
rm(list=ls(all=TRUE))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/midterm1/in-progress")
df_train <- read.csv("midterm1_train.csv")
df_test <- read.csv("midterm1_testProto.csv")
# take of log of `share`
df_train$shares = log(df_train$shares)
df_test$shares = log(df_test$shares)
# adding the `viral content category` variable
df_train$data_channel_is_viral = df_train$data_channel_is_lifestyle
for (i in 1:nrow(df_train)){
if (df_train[i, "data_channel_is_lifestyle"] == 0 &
df_train[i, "data_channel_is_entertainment"] == 0 &
df_train[i, "data_channel_is_bus"] == 0 &
df_train[i, "data_channel_is_socmed"] == 0 &
df_train[i, "data_channel_is_tech"] == 0 &
df_train[i, "data_channel_is_world"] == 0){
df_train[i, "data_channel_is_viral"] = 1
} else{
df_train[i, "data_channel_is_viral"] = 0
}
}
df_train$data_channel_is_viral <- as.integer(df_train$data_channel_is_viral)
df_test$data_channel_is_viral = df_test$data_channel_is_lifestyle
for (i in 1:nrow(df_test)){
if (df_test[i, "data_channel_is_lifestyle"] == 0 &
df_test[i, "data_channel_is_entertainment"] == 0 &
df_test[i, "data_channel_is_bus"] == 0 &
df_test[i, "data_channel_is_socmed"] == 0 &
df_test[i, "data_channel_is_tech"] == 0 &
df_test[i, "data_channel_is_world"] == 0){
df_test[i, "data_channel_is_viral"] = 1
} else{
df_test[i, "data_channel_is_viral"] = 0
}
}
df_test$data_channel_is_viral <- as.integer(df_test$data_channel_is_viral)
# dropping variables that might cause collinearity issue
df_train <- subset(df_train, select = -c(is_weekend, LDA_04, url))
df_test <- subset(df_test, select = -c(is_weekend, LDA_04, url))
set.seed(1234)
ind <- sample(2, nrow(df_train), replace = T, prob = c(0.7, 0.3))
df_train_sample <- df_train[ind == 1, ]
df_test_sample <- df_train[ind == 2, ]
lm_fit <- readRDS("lm_fit.rds")
knn_fit <- readRDS("knn_fit.rds")
LASSO_fit <- readRDS("LASSO_fit.rds")
gam_LASSO <- readRDS("GAM_LASSO.rds")
gam_combined <- readRDS("GAM_combine.rds")
bagged_tree <- readRDS("bagged_tree.rds")
rf_fit <- readRDS("rf.rds")
boost_tree_1 <- readRDS("boost_tree_1(interaction.depth=1).rds")
boost_tree_2 <- readRDS("boost_tree_2(interaction.depth=2).rds")
# linear
LOOCV <- mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
lm_RMSE <- round(sqrt(LOOCV), 5)
# knn
knn_RMSE <- knn_fit$results[3,2]
# LASSO
LASSO_RMSE <- round(sqrt(0.7878), 5)
# GAM_LASSO
GAM_LASSO_RMSE <- round(sqrt(summary(gam_LASSO)$sp.criterion), 5)
# GAM_Combine
GAM_Combine_RMSE <- round(sqrt(summary(gam_combined)$sp.criterion), 5)
# bagged_tree
baggedTree_RMSE <- round(sqrt(0.7318782), 5)
# RF
rf_RMSE <- round(sqrt(0.7232391), 5)
# bRF_1
boostedRF1_RMSE <- round(sqrt(boost_tree_1$cv.error[1000]), 5)
# bRF_2
boostedRF2_RMSE <- round(sqrt(boost_tree_2$cv.error[1000]), 5)
RMSE <- c(lm_RMSE, knn_RMSE, LASSO_RMSE,
GAM_LASSO_RMSE, GAM_Combine_RMSE, baggedTree_RMSE,
rf_RMSE, boostedRF1_RMSE, boostedRF2_RMSE)
Model <- c('Linear', 'KNN', 'LASSO',
'GAM_LASSO', 'GAM_combined', 'Bagged Tree', 'Random Forest', 'Boosted Random Forest (1)',
'Boosted Random Forest (2)')
model_compare <- data.frame(Model, RMSE)
model_compare %>% arrange(model_compare$RMSE)
trn_x <- as.matrix(df_train_sample[,-58])
trn_y <- as.matrix(df_train_sample$shares)
tst_x <- as.matrix(df_test_sample[,-58])
tst_y <- as.matrix(df_test_sample$shares)
tst_x_df <- df_test_sample[,-58]
prediction.linear <- predict(lm_fit, newdata = tst_x_df)
prediction.KNN <- predict(knn_fit, newdata = tst_x_df)
fit.LASSO <- glmnet::glmnet(trn_x, trn_y, alpha = 1)
prediction.LASSO <- predict(fit.LASSO, newx = tst_x, s = LASSO_fit$lambda.1se)
prediction.GAM_LASSO <- predict(gam_LASSO, newdata = tst_x_df)
prediction.GAM_Combined <- predict(gam_combined, newdata = tst_x_df)
prediction.baggedTree <- predict(bagged_tree, tst_x_df)
prediction.baggedTree <- prediction.baggedTree$predictions
prediction.RF <- predict(rf_fit, tst_x_df)
prediction.RF <- prediction.RF$predictions
prediction.bRF_1 <- predict(boost_tree_1, newdata = tst_x_df)
prediction.bRF_2 <- predict(boost_tree_2, newdata = tst_x_df)
test.RMSE <- data.frame(Models = c("Linear","KNN","Lasso", "GAM_LASSO",
"GAM_Combined", "Bagged Tree", "Random Forest",
"Boosted Random Forest(1)", "Boosted Random Forest(2)"),
RMSE = c(ModelMetrics::rmse(pred=prediction.linear, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.KNN, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_LASSO, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.GAM_Combined, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.baggedTree, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.RF, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_1, actual = df_test_sample$shares),
ModelMetrics::rmse(pred=prediction.bRF_2, actual = df_test_sample$shares)))
test.RMSE$RMSE <- round(test.RMSE$RMSE, 5)
test.RMSE %>% arrange(RMSE)
mean((lm_fit$residuals/(1-hatvalues(lm_fit)))^2)
