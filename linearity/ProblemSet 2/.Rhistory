for ( i in 1:10){
view(paste('model_', i, sep = ''))
}
for ( i in 1:10){
view(model + i)
}
for ( i in 1:10){
view(model_ + i)
}
metrics_df <- data_frame()
metrics_df <- data.frame()
metrics_df <- data.frame()
fit <- lm_pred_metrics(model_1)
rbind(metrics_df, fit)
metrics_df <- data.frame()
fit <- lm_pred_metrics(model_1)
metrics_df <- data.frame()
fit <- lm_pred_metrics(model_1)
metrics_df <- data.frame()
fit <- lm_pred_metrics(model_1)
View(fit)
metrics_df <- data.frame()
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit <- lm_pred_metrics(model_1)
fit_test <- lm_pred_metrics(model_1)
lm_pred_metrics(fit)
fit <- lm(Price ~ Age, housePrice)
summary(fit)
lm_pred_metrics(fit)
for (i in 1:10){
model = lm(Price ~poly(Age, degree = i, raw = T), data = housePrice)
assign(paste('model_', i, sep = ''), model)
models <- append(models, model)
}
for (i in 1:10){
model = lm(Price ~poly(Age, degree = i, raw = T), data = housePrice)
assign(paste('model_', i, sep = ''), model)
}
metrics_df <- data.frame()
fit_test <- lm_pred_metrics(model_1)
fi2_test <- lm_pred_metrics(model_2)
rbind(metrics_df, fit)
fit_test <- lm_pred_metrics(model_1)
fi2_test <- lm_pred_metrics(model_2)
rbind(metrics_df, fit_test)
rbind(metrics_df, fit2_test)
rbind(metrics_df, fi2_test)
metrics_df <- rbind(metrics_df, fit_test)
metrics_df <- rbind(metrics_df, fi2_test)
View(metrics_df)
metrics_df <- data.frame()
models <- c(model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8, model_9, model_10)
for ( i in models){
metrics_df <- rbind(metrics_df, lm_pred_metrics(i))
}
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_1))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_2))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_3))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_4))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_5))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_6))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_7))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_8))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_9))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_10))
View(metrics_df)
metrics_df <- cbind(metrics_df, seq(1, 20))
View(metrics_df)
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_1))
metrics_df <- data.frame()
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_1))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_2))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_3))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_4))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_5))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_6))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_7))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_8))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_9))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_10))
View(metrics_df)
metrics_df <- cbind(metrics_df, seq(1, 10))
View(metrics_df)
metrics_df <- data.frame()
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_1))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_2))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_3))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_4))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_5))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_6))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_7))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_8))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_9))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_10))
seq <- seq(1, 10)
metrics_df <- cbind(metrics_df, seq)
View(metrics_df)
for (i in 1:10){
model = lm(Price ~poly(Age, degree = i, raw = T), data = housePrice)
assign(paste('model_', i, sep = ''), model)
}
metrics_df <- data.frame()
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_1))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_2))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_3))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_4))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_5))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_6))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_7))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_8))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_9))
metrics_df <- rbind(metrics_df, lm_pred_metrics(model_10))
seq <- seq(1, 10)
metrics_df <- cbind(metrics_df, seq)
View(metrics_df)
gg <- ggplot(metrics_df, aes(x=seq, y=AIC)) +
geom_line() +
labs(
y="AIC",
x="n_degree",
title="n_degree vs. AIC")
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=AIC)) +
geom_line() +
labs(
y="AIC",
x="n_degree",
title="n_degree vs. AIC") + xlab("seq")
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=AIC)) +
geom_line() +
labs(
y="AIC",
x="n_degree",
title="n_degree vs. AIC") + xlab(seq)
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=AIC)) +
geom_line() +
labs(
y="AIC",
x="n_degree",
title="n_degree vs. AIC") + scale_x_continuous("seq", labels = as.character(seq), breaks = seq)
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=BIC)) +
geom_line() +
labs(
y="BIC",
x="n_degree",
title="n_degree vs. BIC") +
scale_x_continuous("seq", labels = as.character(seq), breaks = seq)
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=LOOCV)) +
geom_line() +
labs(
y="LOOCV",
x="n_degree",
title="n_degree vs. LOOCV") +
scale_x_continuous("seq", labels = as.character(seq), breaks = seq)
plot(gg)
gg <- ggplot(metrics_df, aes(x=seq, y=GCV)) +
geom_line() +
labs(
y="GCV",
x="n_degree",
title="n_degree vs. GCV") +
scale_x_continuous("seq", labels = as.character(seq), breaks = seq)
plot(gg)
lm_pred_metrics(model_1)
lm_pred_metrics(model_10)
View(housePrice)
pred_price_age <- predict(model_2, housePrice[,'Age'])
View(model_2)
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_2, new)
new <- data.frame(Age = housePrice[,'Age'], Age_2 = (housePrice$Age)^2)
View(new)
new <- data.frame(Age = housePrice[,'Age'], Age_2 = (housePrice$Age)^2)
pred_price_age <- predict(model_2, new)
View(model_2)
model_test <- lm(Price ~poly(Age, degree = 2, raw = T), data = housePrice)
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
new
pred_price_age
new <- data.frame(Age = housePrice[,'Age'], Age_2 = housePrice$Age)
pred_price_age <- predict(model_test, new)
pred_Price_age
pred_Price_age
pred_price_age
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
lm_pred_metrics(model_test)
#new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_optim, housePrice[,'Age'])
model_optim <- lm(Price ~poly(Age, degree = 2, raw = T), data = housePrice)
#new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_optim, housePrice[,'Age'])
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
new <- cbind(new, pred_price_age)
View(new)
new <- cbind(new, pred_price_age)
new <- cbind(new, housePrice$Price)
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
new <- cbind(new, pred_price_age)
new <- cbind(new, housePrice$Price)
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
new <- cbind(new, pred_price_age)
new <- cbind(new, price = housePrice$Price)
new <- data.frame(Age = housePrice[,'Age'])
pred_price_age <- predict(model_test, new)
new <- cbind(new, pred_price_age)
new <- cbind(new, Price = housePrice$Price)
colors <- c("origina_price" = "red", "predicted_price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_line(aes(y = Price, color = "origina_price"), size = 1.1) +
geom_line(aes(y = pred_price_age, color = "predicted_price"), size = 1.1) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
colors <- c("origina_price" = "red", "predicted_price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_line(aes(y = Price, color = "origina_price"), size = 1) +
geom_line(aes(y = pred_price_age, color = "predicted_price"), size = 1) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
colors <- c("Observed Price" = "red", "Predicted Price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_line(aes(y = Price, color = "origina_price")) +
geom_line(aes(y = pred_price_age, color = "predicted_price")) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
colors <- c("Observed Price" = "red", "Predicted Price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_line(aes(y = Price, color = "Observed Price")) +
geom_line(aes(y = pred_price_age, color = "Predicted Price")) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
colors <- c("Observed Price" = "red", "Predicted Price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_line(aes(y = Price, color = "Observed Price")) +
geom_point(aes(y = pred_price_age, color = "Predicted Price")) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
colors <- c("Observed Price" = "red", "Predicted Price" = "blue")
gg <- ggplot(new, aes(x = Age)) +
geom_point(aes(y = Price, color = "Observed Price")) +
geom_line(aes(y = pred_price_age, color = "Predicted Price")) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
plot(gg)
gg <- ggplot(housePrice, aes(x=Age, y=Price)) +
geom_point() +
labs(
y="Price",
x="Age",
title="Age vs. Price")
plot(gg)
gg <- ggplot(housePrice, aes(x = DisttoMRT)) +
geom_line(aes(y = Price)) +
labs(
y="Price",
x="Age",
title="Quadratic Model Prediction",
color = "Legend"
)
plot(gg)
gg <- ggplot(housePrice, aes(x = DisttoMRT)) +
geom_line(aes(y = Price)) +
labs(
y="Price",
x="Distance to MRT",
title="Distance to MRT vs. Price"
)
plot(gg)
gg <- ggplot(housePrice, aes(x = NumConvStore)) +
geom_line(aes(y = Price)) +
labs(
y="Price",
x="NumConvStore",
title="NumConvStore vs. Price"
)
plot(gg)
gg <- ggplot(housePrice, aes(x = NumConvStores)) +
geom_line(aes(y = Price)) +
labs(
y="Price",
x="NumConvStores",
title="NumConvStore vs. Price"
)
plot(gg)
gg <- ggplot(housePrice, aes(x = NumConvStores)) +
geom_point(aes(y = Price)) +
labs(
y="Price",
x="NumConvStores",
title="NumConvStore vs. Price"
)
plot(gg)
set.seed(2022)
indexes = createDataPartition(housePrice$Price, p = .80, list = F, times = 1)
train = housePrice[indexes, ]
test = housePrice[-indexes, ]
train_x = train[, c('DisttoMRT', 'NumConvStores')]
train_y = train[,'Price']
test_x = test[, c('DisttoMRT', 'NumConvStores')]
test_y = test[,'Price']
set.seed(2022)
indexes = createDataPartition(housePrice$Price, p = .80, list = F, times = 1)
train = housePrice[indexes, ]
test = housePrice[-indexes, ]
train_x = train[, c('DisttoMRT', 'NumConvStores')]
train_y = train[,'Price']
test_x = test[, c('DisttoMRT', 'NumConvStores')]
test_y = test[,'Price']
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeat = 3)
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
plot(fit)
set.seed(2022)
indexes = createDataPartition(housePrice$Price, p = .80, list = F, times = 1)
train = housePrice[indexes, ]
test = housePrice[-indexes, ]
train_x = train[, c('DisttoMRT', 'NumConvStores')]
train_y = train[,'Price']
test_x = test[, c('DisttoMRT', 'NumConvStores')]
test_y = test[,'Price']
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = train_x, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(222)
fit <- train(train_y ~ train_x, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
set.seed(2022)
indexes = sample(2, nrow(data), replace = T, prob = c(0.8, 0.2))
set.seed(2022)
indexes = sample(2, nrow(housePrice), replace = T, prob = c(0.8, 0.2))
training <- housePrice[indexes == 1,]
testing <- housePrice[indexed == 2,]
set.seed(2022)
indexes = sample(2, nrow(housePrice), replace = T, prob = c(0.8, 0.2))
training <- housePrice[indexes == 1,]
testing <- housePrice[indexes == 2,]
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(123)
fit <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
fit
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(123)
fit_test <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
fit_test
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 20,
repeats = 3)
set.seed(123)
fit_test <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
fit_test
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 2,
repeats = 3)
set.seed(123)
fit_test <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
fit_test
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 314,
repeats = 3)
set.seed(123)
fit_test <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 20,
repeats = 3)
set.seed(123)
fit_test <- train(Price ~ Lat + Long, data = housePrice, method = 'knn',
tuneLength = 20, trControl = trControl)
fit_test
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 20,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
set.seed(2022)
indexes = sample(2, nrow(housePrice), replace = T, prob = c(0.8, 0.2))
training <- housePrice[indexes == 1,]
testing <- housePrice[indexes == 2,]
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 20,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
# KNN Model
trControl <- trainControl(method = "repeatedcv",
number = 20,
repeats = 3)
set.seed(222)
fit <- train(Price ~ DisttoMRT + NumConvStores, data = training, method = 'knn',
tuneLength = 20, trControl = trControl,
preProc = c("center", "scale"))
fit
pred <- predict(fit, testing)
varImp(fit)
fit
plot(pred ~ testing$Price)
