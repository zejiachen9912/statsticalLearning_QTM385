test <- c(1, ,2 ,3)
test <- c(1, 2 ,3)
mean(test)
test <- c(1, 2 ,3)
length(test)
sum_squared_errors <- function(coefficients, x, y){
return(sum((coefficients[1] + coefficients[2] * x - y)^2))
}
sse_minimizer <- function(x, y){
result <- optim(par = c(0, 1), fn = sum_squared_errors, x = x, y =y)
alpha_est <- result$par[1]
beta_est <- result$par[2]
beta_true <- cov(x, y) / var(x)
alpha_true <- mean(y) - beta_true * mean(x)
predicted_coefficient <- c(alpha_est, beta_est)
true_coefficient <- c(alpha_true, beta_true)
mse <- sum_squared_errors(predicted_coefficient, x, y)/length(x) - sum_squared_errors(true_coefficient, x, y)/length(x)
outcome <- c(alpha_est, beta_est, beta_true, alpha_true, mse)
return(outcome)
}
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value)
x_value
y_value
length(y_value)
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
length(y_value)
y_value
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value)
y_value
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
y_value
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
x_value
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value)
x_value
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
sse_minimizer(x_value, y_value)
sum_squared_errors <- function(coefficients, x, y){
return(sum((coefficients[1] + coefficients[2] * x - y)^2))
}
sse_minimizer <- function(x, y){
result <- optim(par = c(0, 1), fn = sum_squared_errors, x = x, y =y)
alpha_est <- result$par[1]
beta_est <- result$par[2]
beta_true <- cov(x, y) / var(x)
alpha_true <- mean(y) - beta_true * mean(x)
predicted_coefficient <- c(alpha_est, beta_est)
true_coefficient <- c(alpha_true, beta_true)
mse <- sum_squared_errors(predicted_coefficient, x, y)/length(x) - sum_squared_errors(true_coefficient, x, y)/length(x)
outcome <- c(alpha_est, beta_est, alpha_true, beta_true, mse)
return(outcome)
}
sum_squared_errors <- function(coefficients, x, y){
return(sum((coefficients[1] + coefficients[2] * x - y)^2))
}
sse_minimizer <- function(x, y){
result <- optim(par = c(0, 1), fn = sum_squared_errors, x = x, y =y)
alpha_est <- result$par[1]
beta_est <- result$par[2]
beta_true <- cov(x, y) / var(x)
alpha_true <- mean(y) - beta_true * mean(x)
predicted_coefficient <- c(alpha_est, beta_est)
true_coefficient <- c(alpha_true, beta_true)
mse <- sum_squared_errors(predicted_coefficient, x, y)/length(x) - sum_squared_errors(true_coefficient, x, y)/length(x)
outcome <- c(alpha_est, beta_est, alpha_true, beta_true, mse)
format(outcome, scientific = FALSE)
return(outcome)
}
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
sse_minimizer(x_value, y_value)
sum_squared_errors <- function(coefficients, x, y){
return(sum((coefficients[1] + coefficients[2] * x - y)^2))
}
sse_minimizer <- function(x, y){
result <- optim(par = c(0, 1), fn = sum_squared_errors, x = x, y =y)
alpha_est <- result$par[1]
beta_est <- result$par[2]
beta_true <- cov(x, y) / var(x)
alpha_true <- mean(y) - beta_true * mean(x)
predicted_coefficient <- c(alpha_est, beta_est)
true_coefficient <- c(alpha_true, beta_true)
mse <- sum_squared_errors(predicted_coefficient, x, y)/length(x) - sum_squared_errors(true_coefficient, x, y)/length(x)
outcome <- c(alpha_est, beta_est, alpha_true, beta_true, mse)
return(format(outcome, scientific = FALSE))
}
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
sse_minimizer(x_value, y_value)
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
dat=data.frame(x=x_value,
y=y_value)
lm(y ~ x, data = dat)
sse_minimizer(x_value, y_value)
set.seed(123)
x_value <- sort(runif(1000, -3, 3))
y_value <- -1.267 + (2.029*x_value) + rnorm(100, 0 ,1)
sse_minimizer(x_value, y_value)
dat=data.frame(x=x_value,
y=y_value)
lm(y ~ x, data = dat)
