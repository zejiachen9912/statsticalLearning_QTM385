setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
ols_officez$coefficient
ols_office <- lm(imbd_rating ~., data = office_trn)
ols_office <- lm(imdb_rating ~., data = office_trn)
ols_office$coefficients
ols_office$coefficients[0]
ols_office$coefficients
summary(ols_office)
coef <- ols_office$coefficients[0, 1]
coef <- ols_office$coefficients[, 1]
coef <- summary(ols_office$coefficients[, 1])
coef <- summary(ols_office)$coefficients[, 1]
coef
View(coef)
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating, columns = c("fitted", "observe"))
#plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating, columns = c("fitted", "observe"))
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(aes(x = ols_office$fitted.values, y = office_trn$imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
library(ggplot2)
#plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating, columns = c("fitted", "observe"))
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(aes(x = ols_office$fitted.values, y = office_trn$imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating, columns = c("fitted", "observe"))
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
View(plot_df)
names(plot_df)
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = names(plot_df)[1], y = names(plot_df)[2])) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
ols_office <- lm(imdb_rating ~.,
data = subset(office_trn, select=c( -season, -episode, -episode_name ) ))
coef <- summary(ols_office)$coefficients[, 1]
View(coef)
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = names(plot_df)[1], y = names(plot_df)[2])) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
View(plot_df)
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = ols_office.fitted.values, y = office_trn.imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
names(plot_df)[1]
ols_office <- lm(imdb_rating ~.,
data = subset(office_trn, select=c( -season, -episode, -episode_name ) ))
coef <- summary(ols_office)$coefficients[, 1]
# plot
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = ols_office.fitted.values,
y = office_trn.imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
#LOOCV
print(paste("LOOCV = ", mean(ols_office$residuals/(1-hatvalues(ols_office))^2)))
ols_office <- lm(imdb_rating ~.,
data = subset(office_trn, select=c( -season, -episode, -episode_name ) ))
coef <- summary(ols_office)$coefficients[, 1]
# plot
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = ols_office.fitted.values,
y = office_trn.imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
#LOOCV
print(paste("LOOCV = ", mean((ols_office$residuals/(1-hatvalues(ols_office)))^2)))
coef
summary(ols_office)
office_trnPrep <- as.matrix(office_trn[,-1])
View(office_trnPrep)
office_trnPrep <- as.matrix(office_trn[,-3])
View(office_trnPrep)
office_trnPrep <- as.matrix(data = subset(office_trn, select=c( -season, -episode, -episode_name, -imdb_rating)))
office_trnPrep <- as.matrix(subset(office_trn, select=c( -season, -episode, -episode_name, -imdb_rating)))
View(office_trnPrep)
office_trnPrep <- as.matrix(subset(office_trn, select=c( -season, -episode, -episode_name, -imdb_rating)))
office_trnOut <- as.matrix(office_trn$imdb_rating)
office_trnPrep
office_trnOut
ols_office <- lm(imdb_rating ~.,
data = subset(office_trn, select=c( -season, -episode, -episode_name ) ))
coef <- summary(ols_office)$coefficients[, 1]
# plot
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot2::ggplot(plot_df, aes(x = ols_office.fitted.values,
y = office_trn.imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
#LOOCV
print(paste("LOOCV = ", mean((ols_office$residuals/(1-hatvalues(ols_office)))^2)))
office_trnPrep <- as.matrix(subset(office_trn, select=c( -season, -episode, -episode_name, -imdb_rating)))
office_trnOut <- as.matrix(office_trn$imdb_rating)
ridge_office <- glmnet::glmnet(x = office_trnPrep, y = office_trnOut, alpha = 0)
View(ols_office)
View(ols_office[,-1])
View(office_trn)
View(office_trn[,-1])
office_trn <- subset(office_trn, select=c( -episode_name ))
str(office_trn)
office_trn <- subset(office_trn, select=c( -episode_name ))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trn$season[office_trn$season == paste("Season ", i)] <- i
}
View(office_trnClean)
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnClean$season[office_trn$season == paste("Season ", i)] <- i
}
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnClean$season[office_trn$season == paste("Season ", i)] <- i
}
View(office_trnClean)
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnClean$season[office_trnClean$season == paste("Season ", i)] <- i
}
View(office_trnClean)
office_trnClean$season[office_trnClean$season == "Season 1"] <- 1
View(office_trnClean)
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
office_trnClean <- subset(office_trn, select=c( -episode_name ))
office_trnClean$season[office_trnClean$season == paste("Season ", 1)] <- 1
paste("Season ", 1)]
paste("Season ", 1)
office_trnClean$season[office_trnClean$season == paste("Season", 1)] <- 1
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnClean$season[office_trnClean$season == paste("Season", i)] <- i
}
View(office_trnClean)
office_trnClean <- subset(office_trn, select=c( -episode_name ))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnClean$season[office_trnClean$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_trnClean$season <- as.factor(office_trnClean$season)
office_trnClean$episode <- as.factor(office_trnClean$episode)
str(office_trn)
str(office_trnClean)
a
library(caret)
library(glmnet)
library(plotmo)
library(caret)
library(glmnet)
library(plotmo)
dummy_office_trn <- caret::dummyVars("~ .", data = office_trnFac)
library(ggplot2)
rm(list=ls(all=TRUE))
setwd("/Users/zejiachen/Desktop/Sspring 2022/Statstical Learning/problemSet 3")
office_trn <- read.csv("office_train.csv")
office_test <- read.csv("office_test.csv")
ols_office <- lm(imdb_rating ~.,
data = office_trnFac)
office_trnFac <- subset(office_trn, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_trnFac$season[office_trnFac$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_trnFac$season <- as.factor(office_trnFac$season)
#office_trnFac$episode <- as.factor(office_trnFac$episode)
ols_office <- lm(imdb_rating ~.,
data = office_trnFac)
coef <- summary(ols_office)$coefficients[, 1]
# plot
plot_df <- data.frame(ols_office$fitted.values, office_trn$imdb_rating)
colors <- c( "predict_rating" = "red", "overseved rating" = "blue")
gg <- ggplot(plot_df, aes(x = ols_office.fitted.values,
y = office_trn.imdb_rating)) +
geom_point() +
geom_abline(intercept=0, slope=1, col = 'red') +
labs(
y="overserved rating",
x="fitted rating",
color = "Legend"
)
plot(gg)
#LOOCV
print(paste("LOOCV = ", mean((ols_office$residuals/(1-hatvalues(ols_office)))^2)))
office_testFac <- subset(office_test, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_testFac$season[office_testFac$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
pred_ols<-predict.lm(ols_office, office_testFac)
a=sum((pred_ols-office_testFac$imdb_rating)^2)/21 # MSE
a
dummy_office_test <- caret::dummyVars("~ .", data = office_testFac)
office_testFac <- data.frame(predict(dummy_office_test, newdata = office_testFac))
office_testPrep <- as.matrix(office_testFac[,-37])
office_testOut <- as.matrix(office_testFac$imdb_rating)
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
office_testFac <- subset(office_test, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_testFac$season[office_testFac$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
pred_ols<-predict.lm(ols_office, office_testFac)
a=sum((pred_ols-office_testFac$imdb_rating)^2)/21 # MSE
a
dummy_office_test <- caret::dummyVars("~ .", data = office_testFac)
office_testFac <- data.frame(predict(dummy_office_test, newdata = office_testFac))
office_testPrep <- as.matrix(office_testFac[,-37])
office_testOut <- as.matrix(office_testFac$imdb_rating)
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
office_testFac <- subset(office_test, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_testFac$season[office_testFac$season == paste("Season", i)] <- i
}
office_testFac$season <- as.factor(office_testFac$season)
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
pred_ols<-predict.lm(ols_office, office_testFac)
a=sum((pred_ols-office_testFac$imdb_rating)^2)/21 # MSE
a
dummy_office_test <- caret::dummyVars("~ .", data = office_testFac)
office_testFac <- data.frame(predict(dummy_office_test, newdata = office_testFac))
office_testPrep <- as.matrix(office_testFac[,-37])
office_testOut <- as.matrix(office_testFac$imdb_rating)
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
# convert `season` & `episode` to type factor
pred_ols<-predict.lm(ols_office, office_testFac)
office_testFac <- subset(office_test, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_testFac$season[office_testFac$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
pred_ols<-predict.lm(ols_office, office_testFac)
a=sum((pred_ols-office_testFac$imdb_rating)^2)/21 # MSE
a
View(office_testFac)
office_testFac <- subset(office_test, select=c( -episode_name, -episode))
# Re-label values of Season (1 = Season 1, 2 = Season 2, ...)
for (i in (1:9)){
office_testFac$season[office_testFac$season == paste("Season", i)] <- i
}
# convert `season` & `episode` to type factor
office_testFac$season <- as.factor(office_testFac$season)
pred_ols<-predict.lm(ols_office, office_testFac)
a=sum((pred_ols-office_testFac$imdb_rating)^2)/21 # MSE
a
