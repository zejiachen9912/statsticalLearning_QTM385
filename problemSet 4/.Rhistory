) +
scale_color_manual(values = colors)
library(splines)
lm_bspline <- lm(Outstate ~ bs(S.F.Ratio, df = 5, degree = 3), data = df_train)
lm_nspline <- lm(Outstate ~ ns(S.F.Ratio), data = df_train)
lm_sspline <- smooth.spline(S.F.Ratio, Outstate, cv = T)
lm_sspline <- smooth.spline(df_train$S.F.Ratio, df_train$Outstate, cv = T)
x <- as.matrix(df_train$S.F.Ratio)
y <- as.matrix(df_train$Outstate)
lm_sspline <- smooth.spline(x, y, cv = T)
x <- as.matrix(df_train$S.F.Ratio)
y <- as.matrix(df_train$Outstate)
lm_sspline <- smooth.spline(x, y)
lm_optim <- lm(Outstate ~poly(S.F.Ratio, degree = 3, raw = T), data = df_train)
df_predict <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_Outstate <- predict(lm_optim, df_predict)
df_predict <- cbind(df_predict, pred_Outstate, Outstate = df_train$Outstate)
colors <- c("Observed Tuition" = "grey", "Predicted Tuition" = "blue")
ggplot(df_predict, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_Outstate, color = "Predicted Tuition")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Cubic Linear Polynomial Prediction",
color = "Legend"
) +
scale_color_manual(values = colors)
View(new_data)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
df_predict_splines <- cbind(df_predict_splines, pred_bs, pred_ns, pred_ss, Outstate = df_train$Outstate)
colors <- c("Observed Tuition" = "grey", "bs" = "blue", "ns" = "red", "ss" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bs")) +
geom_line(aes(y = pred_ns, color = "ns")) +
geom_line(aes(y = pred_ss, color = "ss")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
View(df_predict_splines)
View(df_predict_splines)
View(pred_ss)
lm_sspline <- with(df_train, ss(S.F.Ratio, Outstate))
lm_sspline <- with(df_train, smooth.spline(S.F.Ratio, Outstate))
#lm_sspline <- smooth.spline(x, y)
lm_sspline
# plot fit
plot(lm_sspline, xlab = "Time (ms)", ylab = "Acceleration (g)")
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
#df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns, pred_ss, Outstate = df_train$Outstate)
View(pred_ss)
pred_ss
pred_ss[2]
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
pred_ss[2]
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
pred_ss[2]
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss[2], df_train$Outstate)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
pred_ss[2]
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
pred_ss[2]
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
colnames(df_predict_splines)[4] <- "pred_ss"
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
colnames(df_predict_splines)[4] <- "pred_ss"
colors <- c("Observed Tuition" = "grey", "bs" = "blue", "ns" = "red", "ss" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bs")) +
geom_line(aes(y = pred_ns, color = "ns")) +
geom_line(aes(y = pred_ss, color = "ss")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red", "sSpline" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bSpline")) +
geom_line(aes(y = pred_ns, color = "nSpline")) +
geom_line(aes(y = pred_ss, color = "sSpline")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
lm_bspline <- lm(Outstate ~ bs(S.F.Ratio, df = 10, degree = 3), data = df_train)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
colnames(df_predict_splines)[4] <- "pred_ss"
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red", "sSpline" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bSpline")) +
geom_line(aes(y = pred_ns, color = "nSpline")) +
geom_line(aes(y = pred_ss, color = "sSpline")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
names(df_train)
lm_bspline <- lm(Outstate ~ bs(S.F.Ratio, df = 19, degree = 3), data = df_train)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
colnames(df_predict_splines)[4] <- "pred_ss"
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red", "sSpline" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bSpline")) +
geom_line(aes(y = pred_ns, color = "nSpline")) +
geom_line(aes(y = pred_ss, color = "sSpline")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
lm_bspline <- lm(Outstate ~ bs(S.F.Ratio, df = 10, degree = 3), data = df_train)
df_predict_splines <- data.frame(S.F.Ratio = df_train[,'S.F.Ratio'])
pred_bs <- predict(lm_bspline, df_predict_splines)
pred_ns <- predict(lm_nspline, df_predict_splines)
pred_ss <- predict(lm_sspline, df_predict_splines)
df_predict_splines <- cbind(df_predict_splines, pred_bs = pred_bs, pred_ns,
pred_ss = pred_ss[2], Outstate = df_train$Outstate)
colnames(df_predict_splines)[4] <- "pred_ss"
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red", "sSpline" = "green")
ggplot(df_predict_splines, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = pred_bs, color = "bSpline")) +
geom_line(aes(y = pred_ns, color = "nSpline")) +
geom_line(aes(y = pred_ss, color = "sSpline")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Various Splines",
color = "Legend"
) +
scale_color_manual(values = colors)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
mse_ss <- mean(( test_ss - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
test_ss[2]
mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
test_ss[2]
#mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
as.vector(test_ss[2])
#mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)
test_ss[2]
#mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test_ss[1]
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
#mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
mse_ss <- mean(( test_ss[2] - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
mse_ss <- mean(( test_ss - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
mse_ss <- mean(( as.matrix(test_ss) - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
test_ss
#mse_ss <- mean(( as.matrix(test_ss) - df_test$Outstate )^2)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
as.matrix(test_ss)
#mse_ss <- mean(( as.matrix(test_ss) - df_test$Outstate )^2)
as.vector(test_ss)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
as.vector(test_ss)
mse_ss <- mean(( as.vector(test_ss) - df_test$Outstate )^2)
test_ss <- predict(lm_sspline, test)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
View(temp)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$Outstate )^2)
View(temp)
test <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$observe )^2)
test_pred <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test_pred)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test_pred)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test_pred)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test_pred)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$observe )^2)
test
test_pred <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test_pred)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test_pred)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test_pred)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test_pred)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$observe )^2)
test_pred <- cbind(test_pred, poly = test_pred, test_bs, test_ns,
test_ss = test_ss[2], Outstate = df_test$Outstate)
test_pred <- cbind(test_pred, poly = test_pred, test_bs, test_ns,
test_ss = temp$predict, Outstate = df_test$Outstate)
View(test_pred)
test_pred <- cbind(test_pred, poly = test_poly, test_bs, test_ns,
test_ss = temp$predict, Outstate = df_test$Outstate)
test_pred <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test_pred)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test_pred)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test_pred)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test_pred)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$observe )^2)
test_pred <- cbind(test_pred, poly = test_poly, test_bs, test_ns,
test_ss = temp$predict, Outstate = df_test$Outstate)
test_pred <- cbind(test_pred, poly = test_poly, test_bs, test_ns,
test_ss = temp$predict, Outstate = df_test$Outstate)
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red",
"sSpline" = "green", "poly" = "orange")
ggplot(test_pred, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = test_bs, color = "bSpline")) +
geom_line(aes(y = test_ns, color = "nSpline")) +
geom_line(aes(y = test_ss, color = "sSpline")) +
geom_line(aes(y = poly, color = "poly")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Validation",
color = "Legend"
) +
scale_color_manual(values = colors)
test_pred <- data.frame(S.F.Ratio = df_test[, 'S.F.Ratio'])
# 3rd order poly
test_poly <- predict(lm_optim, test_pred)
mse_poly <- mean(( test_poly - df_test$Outstate )^2)
# b-spline
test_bs <- predict(lm_bspline, test_pred)
mse_bs <- mean(( test_bs - df_test$Outstate )^2)
# natural spline
test_ns <- predict(lm_nspline, test_pred)
mse_ns <- mean(( test_ns - df_test$Outstate )^2)
# smooth spline
test_ss <- predict(lm_sspline, test_pred)[2]
temp <- data.frame(predict = test_ss, observe = df_test$Outstate)
colnames(temp)[1] <- "predict"
mse_ss <- mean(( temp$predict - temp$observe )^2)
test_pred <- cbind(test_pred, poly = test_poly, test_bs, test_ns,
test_ss = temp$predict, Outstate = df_test$Outstate)
colors <- c("Observed Tuition" = "grey", "bSpline" = "blue", "nSpline" = "red",
"sSpline" = "green", "poly" = "orange")
ggplot(test_pred, aes(x = S.F.Ratio)) +
geom_point(aes(y = Outstate, color = "Observed Tuition")) +
geom_line(aes(y = test_bs, color = "bSpline")) +
geom_line(aes(y = test_ns, color = "nSpline")) +
geom_line(aes(y = test_ss, color = "sSpline")) +
geom_line(aes(y = poly, color = "poly")) +
labs(
y="Tuittion",
x="S.F Ratio",
title="Validation",
color = "Legend"
) +
scale_color_manual(values = colors)
mse <- data.frame(mse_poly, mse_bs, mse_ns,mse_ss)
mse
round(mse, 3)
mse <- data.frame(mse_poly, mse_bs, mse_ns,mse_ss)
round(mse, 5)
round(mse, 3)
